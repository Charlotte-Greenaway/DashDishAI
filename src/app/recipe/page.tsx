"use client";
import { useEffect, useState } from "react";
import { useSearchParams } from "next/navigation";
import axios from "axios";
import {
  FaStar,
  FaHeart,
  FaCheck,
  FaFacebook,
  FaEnvelope,
} from "react-icons/fa";
import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Button,
  useDisclosure,
  Badge,
} from "@nextui-org/react";

interface Recipe {
  message: {
    _id: number;
    recipeTitle: string;
    summary: string;
    rating: number;
    numOfRatings: number;
    image: {
      data: string;
    };
  };
}

export default function RecipePage() {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [recipe, setRecipe] = useState<Recipe | null>(null);
  const [hoveredIndex, setHoveredIndex] = useState<number>(-1);
  const [hasRated, setRated] = useState<boolean>(false);
  const [loading, isLoading] = useState<Boolean>(true);
  const [savedStatus, setSavedStatus] = useState<boolean>(false);
  const searchParams = useSearchParams();

  const getRecipe = async (id: any, missingIngs: any) => {
    const response = await axios.post("/api/getRecipeById", {
      id: id,
      missingIngs: missingIngs,
    });
    console.log(response.data);
    setRecipe(response.data);
    isLoading(false);
  };

  const submitRating = async (index: number) => {
    if (recipe && !hasRated) {
      const userRating = index + 1;
      const response = await axios.post("/api/setRating", {
        id: recipe.message._id,
        userRating: userRating,
        rating: recipe.message.rating,
        numOfRatings: recipe.message.numOfRatings,
      });
      console.log(response.data);
      setRated(true);
      onOpen();
    }
  };

  useEffect(() => {
    if (!searchParams.get("id")) {
      window.location.href = "/";
    } else {
      const id = searchParams.get("id");
      const missingIngs = searchParams.get("missingIngs");
      if (missingIngs) {
        getRecipe(id, missingIngs);
      } else {
        getRecipe(id, "No Ingredients");
      }
    }
  }, []);

  useEffect(() => {
    console.log(recipe);
  }, [recipe]);

  const saveRecipe = async (id: number) => {
    if (!savedStatus) {
      setSavedStatus(true);
      const res = await axios.post("/api/saveRecipe", {
        id: id,
      });
      console.log(res);
    }
  };

  return (
    <>
      {recipe && (
        <div className="max-w-[1400px] mx-auto">
          <div className="flex flex-col lg:flex-row">
            <div className="w-screen lg:w-1/2 flex px-10 py-10 lg:py-0 justify-center flex-col max-h-screen">
              <div className="flex flex-row justify-around my-7">
                <div
                  color="danger"
                  onClick={() => saveRecipe(recipe.message._id)}
                  className=" w-8 h-8 cursor-pointer bg-red-600 rounded-full flex"
                  style={{
                    transition: "color 0.3s, background-color 0.3s",
                  }}
                >
                  {savedStatus ? (
                    <FaCheck color="white" size={20} className=" m-auto" />
                  ) : (
                    <FaHeart color="white" size={20} className="m-auto" />
                  )}
                </div>
                <div className=" flex flex-row">
                  <a
                    href={`https://www.facebook.com/sharer/sharer.php?u=www.dashdish.co.uk?id=${recipe.message._id}`}
                    target="_blank"
                  >
                    <FaFacebook size={35} color="#1877f2" className="mx-3" />
                  </a>
                  <a
                    href={`mailto:?subject=${"Check out this link!"}&body=${encodeURIComponent(
                      `I thought you might be interested in this link: www.dasdish.co.uk?id=${recipe.message._id}`
                    )}`}
                  >
                    <FaEnvelope size={35} color="#1877f2" className="mx-3" />
                  </a>
                </div>
              </div>
              <h1 className="text-4xl font-bold text-center">
                {recipe.message.recipeTitle}
              </h1>
              <p className="text-center p-5">{recipe.message.summary}</p>
              <hr className="border-t-2 border-gray-300 my-4" />
              <small className="text-center p-4 justify-center">
                This recipe was generated by AI, please give us a rating!
              </small>
              <div>
                {
                  <div className="flex justify-center items-center my-3">
                    {Array.from({ length: 5 }).map((_, index) => (
                      <FaStar
                        className="fit-content !m-0"
                        key={index}
                        color={
                          index <= hoveredIndex ||
                          (index < recipe.message.rating && hoveredIndex == -1)
                            ? "#20c536"
                            : "rgba(169, 169, 169, 0.5)"
                        }
                        size={30}
                        onMouseEnter={() => setHoveredIndex(index)}
                        onMouseLeave={() => setHoveredIndex(-1)}
                        onClick={() => submitRating(index)}
                      />
                    ))}
                  </div>
                }
              </div>
              {recipe.message.rating == 0 ? (
                <small className="mx-auto">No Ratings</small>
              ) : (
                <small className="mx-auto">
                  {recipe.message.numOfRatings} Ratings
                </small>
              )}
            </div>
            <img
              className="w-screen lg:w-1/2 flex-end max-h-screen"
              src={`data:image/png;base64,${Buffer.from(
                recipe.message.image.data
              ).toString("base64")}`}
            />
          </div>
          <Modal
            backdrop="blur"
            isOpen={isOpen}
            onClose={onClose}
            className="m-auto"
          >
            <ModalContent>
              {(onClose) => (
                <>
                  <ModalHeader className="flex flex-col gap-1 text-center">
                    Success
                  </ModalHeader>
                  <ModalBody>
                    <p className="text-center">Thanks for the feedback!</p>
                    <p className="text-center">
                      To contact us further, please email
                      enquiries@dashdish.co.uk
                    </p>
                  </ModalBody>
                  <ModalFooter>
                    <Button
                      color="danger"
                      className="mx-auto"
                      variant="light"
                      onPress={onClose}
                    >
                      Close
                    </Button>
                  </ModalFooter>
                </>
              )}
            </ModalContent>
          </Modal>
        </div>
      )}
      {loading && (
        <div className="show">
          <span className="loader mx-auto"></span>
          <span className="loader2">Loading</span>
        </div>
      )}
    </>
  );
}
